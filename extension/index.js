// Generated by CoffeeScript 1.7.1
(function() {
  
// ==UserScript==
// @name       AMap demo extension
// @namespace  http://github.com/bcho/amap-demo
// @version    0.0.1
// @description  TODO
// @match      http://www.amap.com/*
// @copyright  2014 MIT License
// @require http://cdn.staticfile.org/jquery/2.1.1-rc2/jquery.min.js
// @grant GM_xmlhttpRequest
// ==/UserScript==
;
  var CHECK_TIMEOUT_MS, ROUTE_RESULT_ICON_KEY, ROUTE_RESULT_ID_KEY, ROUTE_RESULT_SELECTOR, injectRouteResult, injectWaiter, main, parseRouteResult, parseRouteSteps, __uuid;

  CHECK_TIMEOUT_MS = 2000;

  ROUTE_RESULT_SELECTOR = '.route_info_div';

  ROUTE_RESULT_ID_KEY = 'data-result-id';

  ROUTE_RESULT_ICON_KEY = 'data-result-icon-id';

  __uuid = function() {
    var val;
    val = __uuid.__seq != null ? __uuid.__seq + 1 : 0;
    __uuid.__seq = val;
    return val;
  };

  main = function() {
    return injectWaiter();
  };

  parseRouteSteps = function($result) {
    var i, parseLine, _i, _len, _ref, _results;
    parseLine = function($line) {
      return $line.find('.polylineitem_details').text().trim();
    };
    _ref = $result.find('.polylineitem');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(parseLine($(i)));
    }
    return _results;
  };

  parseRouteResult = function($result) {
    var route;
    return route = {
      from: $result.find('.J_routeFrom').text().trim(),
      to: $result.find('.J_routeTo').text().trim(),
      steps: parseRouteSteps($result)
    };
  };

  injectRouteResult = function($result) {
    var $header, $icon, iconTmpl, resultId;
    resultId = __uuid();
    $result.attr(ROUTE_RESULT_ID_KEY, resultId);
    iconTmpl = "<div title=\"打印\"\n  class=\"ml15 icon_marker cursor\"\n  " + ROUTE_RESULT_ICON_KEY + "=\"" + resultId + "\">\n</div>";
    $header = $result.find('.J_smsPlanToPhone');
    if (!$header) {
      console.warn('Fail to inject icon.');
      return;
    }
    $header.after(iconTmpl);
    $icon = $("[" + ROUTE_RESULT_ICON_KEY + "=\"" + resultId + "\"]");
    return $icon.click(function(e) {
      var route;
      e.preventDefault();
      e.stopPropagation();
      route = parseRouteResult($result);
      return alert("From: " + route.from + " To: " + route.to + " Steps: " + route.steps.length);
    });
  };

  injectWaiter = function() {
    var $routeResults, result, _i, _len, _results;
    console.debug('Waiting to inject spy.');
    $routeResults = $(ROUTE_RESULT_SELECTOR);
    if ($routeResults.length > 0) {
      console.debug('Found results.');
      _results = [];
      for (_i = 0, _len = $routeResults.length; _i < _len; _i++) {
        result = $routeResults[_i];
        _results.push(injectRouteResult($(result)));
      }
      return _results;
    } else {
      console.debug('Will try again...');
      return window.setTimeout(injectWaiter, CHECK_TIMEOUT_MS);
    }
  };

  main();

}).call(this);
